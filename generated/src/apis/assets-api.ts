/* tslint:disable */
/* eslint-disable */
/**
 * Aspect Media Engine API
 * A FastAPI application for AI media engine functionality
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetCreateResponse,
  AssetDownloadGetResponse,
  AssetGetResponse,
  AssetListResponse,
  AssetUpdateRequest,
  AssetUpdateResponse,
  FeatureType,
  HTTPValidationError,
} from '../models/index';
import {
    AssetCreateResponseFromJSON,
    AssetCreateResponseToJSON,
    AssetDownloadGetResponseFromJSON,
    AssetDownloadGetResponseToJSON,
    AssetGetResponseFromJSON,
    AssetGetResponseToJSON,
    AssetListResponseFromJSON,
    AssetListResponseToJSON,
    AssetUpdateRequestFromJSON,
    AssetUpdateRequestToJSON,
    AssetUpdateResponseFromJSON,
    AssetUpdateResponseToJSON,
    FeatureTypeFromJSON,
    FeatureTypeToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface AssetsAssetsRequest {
    indexId: string;
}

export interface AssetsAssetsAssetIdRequest {
    assetId: string;
}

export interface AssetsAssetsAssetIdDownloadRequest {
    assetId: string;
}

export interface AssetsAssetsAssetId0Request {
    assetId: string;
    assetUpdateRequest: AssetUpdateRequest;
}

export interface AssetsAssetsAssetId1Request {
    assetId: string;
}

export interface AssetsAssets0Request {
    indexId: string;
    saveOriginal: boolean;
    name: string;
    id?: string | null;
    features?: Array<FeatureType>;
    assetFile?: Blob | null;
    assetUrl?: string | null;
}

/**
 * AssetsApi - interface
 * 
 * @export
 * @interface AssetsApiInterface
 */
export interface AssetsApiInterface {
    /**
     * Get all assets that belong to a specific index
     * @summary Get Assets
     * @param {string} indexId The ID of the index to get assets from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    assetsAssetsRaw(requestParameters: AssetsAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssetListResponse>>>;

    /**
     * Get all assets that belong to a specific index
     * Get Assets
     */
    assetsAssets(requestParameters: AssetsAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssetListResponse>>;

    /**
     * Get asset details by ID
     * @summary Get Asset
     * @param {string} assetId The ID of the asset to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    assetsAssetsAssetIdRaw(requestParameters: AssetsAssetsAssetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetGetResponse>>;

    /**
     * Get asset details by ID
     * Get Asset
     */
    assetsAssetsAssetId(requestParameters: AssetsAssetsAssetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetGetResponse>;

    /**
     * Get download data for an asset\'s source
     * @summary Get Asset Download Data
     * @param {string} assetId The ID of the asset to download
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    assetsAssetsAssetIdDownloadRaw(requestParameters: AssetsAssetsAssetIdDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDownloadGetResponse>>;

    /**
     * Get download data for an asset\'s source
     * Get Asset Download Data
     */
    assetsAssetsAssetIdDownload(requestParameters: AssetsAssetsAssetIdDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDownloadGetResponse>;

    /**
     * Update an asset by ID
     * @summary Update Asset
     * @param {string} assetId The ID of the asset to update
     * @param {AssetUpdateRequest} assetUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    assetsAssetsAssetId_1Raw(requestParameters: AssetsAssetsAssetId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetUpdateResponse>>;

    /**
     * Update an asset by ID
     * Update Asset
     */
    assetsAssetsAssetId_1(requestParameters: AssetsAssetsAssetId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetUpdateResponse>;

    /**
     * Delete an asset by ID
     * @summary Delete Asset
     * @param {string} assetId The ID of the asset to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    assetsAssetsAssetId_2Raw(requestParameters: AssetsAssetsAssetId1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an asset by ID
     * Delete Asset
     */
    assetsAssetsAssetId_2(requestParameters: AssetsAssetsAssetId1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Create a new asset with direct file upload or URL download
     * @summary Create Asset
     * @param {string} indexId ID of the index this asset belongs to
     * @param {boolean} saveOriginal Whether to save the original file
     * @param {string} name The name of the asset. Must include the extension.
     * @param {string} [id] 
     * @param {Array<FeatureType>} [features] Features to be extracted on the asset
     * @param {Blob} [assetFile] 
     * @param {string} [assetUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    assetsAssets_3Raw(requestParameters: AssetsAssets0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetCreateResponse>>;

    /**
     * Create a new asset with direct file upload or URL download
     * Create Asset
     */
    assetsAssets_3(requestParameters: AssetsAssets0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetCreateResponse>;

}

/**
 * 
 */
export class AssetsApi extends runtime.BaseAPI implements AssetsApiInterface {

    /**
     * Get all assets that belong to a specific index
     * Get Assets
     */
    async assetsAssetsRaw(requestParameters: AssetsAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssetListResponse>>> {
        if (requestParameters['indexId'] == null) {
            throw new runtime.RequiredError(
                'indexId',
                'Required parameter "indexId" was null or undefined when calling assetsAssets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['indexId'] != null) {
            queryParameters['index_id'] = requestParameters['indexId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/assets`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetListResponseFromJSON));
    }

    /**
     * Get all assets that belong to a specific index
     * Get Assets
     */
    async assetsAssets(requestParameters: AssetsAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssetListResponse>> {
        const response = await this.assetsAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get asset details by ID
     * Get Asset
     */
    async assetsAssetsAssetIdRaw(requestParameters: AssetsAssetsAssetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetGetResponse>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetsAssetId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/assets/{asset_id}`;
        urlPath = urlPath.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetGetResponseFromJSON(jsonValue));
    }

    /**
     * Get asset details by ID
     * Get Asset
     */
    async assetsAssetsAssetId(requestParameters: AssetsAssetsAssetIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetGetResponse> {
        const response = await this.assetsAssetsAssetIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get download data for an asset\'s source
     * Get Asset Download Data
     */
    async assetsAssetsAssetIdDownloadRaw(requestParameters: AssetsAssetsAssetIdDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetDownloadGetResponse>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetsAssetIdDownload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/assets/{asset_id}/download`;
        urlPath = urlPath.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetDownloadGetResponseFromJSON(jsonValue));
    }

    /**
     * Get download data for an asset\'s source
     * Get Asset Download Data
     */
    async assetsAssetsAssetIdDownload(requestParameters: AssetsAssetsAssetIdDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetDownloadGetResponse> {
        const response = await this.assetsAssetsAssetIdDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an asset by ID
     * Update Asset
     */
    async assetsAssetsAssetId_1Raw(requestParameters: AssetsAssetsAssetId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetUpdateResponse>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetsAssetId_1().'
            );
        }

        if (requestParameters['assetUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'assetUpdateRequest',
                'Required parameter "assetUpdateRequest" was null or undefined when calling assetsAssetsAssetId_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/assets/{asset_id}`;
        urlPath = urlPath.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetUpdateRequestToJSON(requestParameters['assetUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Update an asset by ID
     * Update Asset
     */
    async assetsAssetsAssetId_1(requestParameters: AssetsAssetsAssetId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetUpdateResponse> {
        const response = await this.assetsAssetsAssetId_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an asset by ID
     * Delete Asset
     */
    async assetsAssetsAssetId_2Raw(requestParameters: AssetsAssetsAssetId1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['assetId'] == null) {
            throw new runtime.RequiredError(
                'assetId',
                'Required parameter "assetId" was null or undefined when calling assetsAssetsAssetId_2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/assets/{asset_id}`;
        urlPath = urlPath.replace(`{${"asset_id"}}`, encodeURIComponent(String(requestParameters['assetId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an asset by ID
     * Delete Asset
     */
    async assetsAssetsAssetId_2(requestParameters: AssetsAssetsAssetId1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assetsAssetsAssetId_2Raw(requestParameters, initOverrides);
    }

    /**
     * Create a new asset with direct file upload or URL download
     * Create Asset
     */
    async assetsAssets_3Raw(requestParameters: AssetsAssets0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetCreateResponse>> {
        if (requestParameters['indexId'] == null) {
            throw new runtime.RequiredError(
                'indexId',
                'Required parameter "indexId" was null or undefined when calling assetsAssets_3().'
            );
        }

        if (requestParameters['saveOriginal'] == null) {
            throw new runtime.RequiredError(
                'saveOriginal',
                'Required parameter "saveOriginal" was null or undefined when calling assetsAssets_3().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling assetsAssets_3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['indexId'] != null) {
            formParams.append('index_id', requestParameters['indexId'] as any);
        }

        if (requestParameters['saveOriginal'] != null) {
            formParams.append('save_original', requestParameters['saveOriginal'] as any);
        }

        if (requestParameters['id'] != null) {
            formParams.append('id', requestParameters['id'] as any);
        }

        if (requestParameters['features'] != null) {
            formParams.append('features', requestParameters['features']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters['assetFile'] != null) {
            formParams.append('asset_file', requestParameters['assetFile'] as any);
        }

        if (requestParameters['assetUrl'] != null) {
            formParams.append('asset_url', requestParameters['assetUrl'] as any);
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }


        let urlPath = `/assets`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new asset with direct file upload or URL download
     * Create Asset
     */
    async assetsAssets_3(requestParameters: AssetsAssets0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetCreateResponse> {
        const response = await this.assetsAssets_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
