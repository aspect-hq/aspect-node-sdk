/* tslint:disable */
/* eslint-disable */
/**
 * Aspect Media Engine API
 * A FastAPI application for AI media engine functionality
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  IndexCreateRequest,
  IndexCreateResponse,
  IndexGetResponse,
  IndexListResponse,
  IndexUpdateRequest,
  IndexUpdateResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    IndexCreateRequestFromJSON,
    IndexCreateRequestToJSON,
    IndexCreateResponseFromJSON,
    IndexCreateResponseToJSON,
    IndexGetResponseFromJSON,
    IndexGetResponseToJSON,
    IndexListResponseFromJSON,
    IndexListResponseToJSON,
    IndexUpdateRequestFromJSON,
    IndexUpdateRequestToJSON,
    IndexUpdateResponseFromJSON,
    IndexUpdateResponseToJSON,
} from '../models/index';

export interface IndexesIndexesIndexIdRequest {
    indexId: string;
}

export interface IndexesIndexesIndexId0Request {
    indexId: string;
    indexUpdateRequest: IndexUpdateRequest;
}

export interface IndexesIndexesIndexId1Request {
    indexId: string;
}

export interface IndexesIndexes0Request {
    indexCreateRequest: IndexCreateRequest;
}

/**
 * IndexesApi - interface
 * 
 * @export
 * @interface IndexesApiInterface
 */
export interface IndexesApiInterface {
    /**
     * Get all indexes for the current user
     * @summary Get All Indexes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexesApiInterface
     */
    indexesIndexesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndexListResponse>>>;

    /**
     * Get all indexes for the current user
     * Get All Indexes
     */
    indexesIndexes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndexListResponse>>;

    /**
     * Get an index by ID
     * @summary Get Index
     * @param {string} indexId The ID of the index to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexesApiInterface
     */
    indexesIndexesIndexIdRaw(requestParameters: IndexesIndexesIndexIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexGetResponse>>;

    /**
     * Get an index by ID
     * Get Index
     */
    indexesIndexesIndexId(requestParameters: IndexesIndexesIndexIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexGetResponse>;

    /**
     * Update an index by ID
     * @summary Update Index
     * @param {string} indexId The ID of the index to update
     * @param {IndexUpdateRequest} indexUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexesApiInterface
     */
    indexesIndexesIndexId_1Raw(requestParameters: IndexesIndexesIndexId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexUpdateResponse>>;

    /**
     * Update an index by ID
     * Update Index
     */
    indexesIndexesIndexId_1(requestParameters: IndexesIndexesIndexId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexUpdateResponse>;

    /**
     * Delete an index by ID
     * @summary Delete Index
     * @param {string} indexId The ID of the index to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexesApiInterface
     */
    indexesIndexesIndexId_2Raw(requestParameters: IndexesIndexesIndexId1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an index by ID
     * Delete Index
     */
    indexesIndexesIndexId_2(requestParameters: IndexesIndexesIndexId1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Create a new index
     * @summary Create Index
     * @param {IndexCreateRequest} indexCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexesApiInterface
     */
    indexesIndexes_3Raw(requestParameters: IndexesIndexes0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexCreateResponse>>;

    /**
     * Create a new index
     * Create Index
     */
    indexesIndexes_3(requestParameters: IndexesIndexes0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexCreateResponse>;

}

/**
 * 
 */
export class IndexesApi extends runtime.BaseAPI implements IndexesApiInterface {

    /**
     * Get all indexes for the current user
     * Get All Indexes
     */
    async indexesIndexesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndexListResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/indexes/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IndexListResponseFromJSON));
    }

    /**
     * Get all indexes for the current user
     * Get All Indexes
     */
    async indexesIndexes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndexListResponse>> {
        const response = await this.indexesIndexesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get an index by ID
     * Get Index
     */
    async indexesIndexesIndexIdRaw(requestParameters: IndexesIndexesIndexIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexGetResponse>> {
        if (requestParameters['indexId'] == null) {
            throw new runtime.RequiredError(
                'indexId',
                'Required parameter "indexId" was null or undefined when calling indexesIndexesIndexId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/indexes/{index_id}`;
        urlPath = urlPath.replace(`{${"index_id"}}`, encodeURIComponent(String(requestParameters['indexId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexGetResponseFromJSON(jsonValue));
    }

    /**
     * Get an index by ID
     * Get Index
     */
    async indexesIndexesIndexId(requestParameters: IndexesIndexesIndexIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexGetResponse> {
        const response = await this.indexesIndexesIndexIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an index by ID
     * Update Index
     */
    async indexesIndexesIndexId_1Raw(requestParameters: IndexesIndexesIndexId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexUpdateResponse>> {
        if (requestParameters['indexId'] == null) {
            throw new runtime.RequiredError(
                'indexId',
                'Required parameter "indexId" was null or undefined when calling indexesIndexesIndexId_1().'
            );
        }

        if (requestParameters['indexUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'indexUpdateRequest',
                'Required parameter "indexUpdateRequest" was null or undefined when calling indexesIndexesIndexId_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/indexes/{index_id}`;
        urlPath = urlPath.replace(`{${"index_id"}}`, encodeURIComponent(String(requestParameters['indexId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IndexUpdateRequestToJSON(requestParameters['indexUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexUpdateResponseFromJSON(jsonValue));
    }

    /**
     * Update an index by ID
     * Update Index
     */
    async indexesIndexesIndexId_1(requestParameters: IndexesIndexesIndexId0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexUpdateResponse> {
        const response = await this.indexesIndexesIndexId_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an index by ID
     * Delete Index
     */
    async indexesIndexesIndexId_2Raw(requestParameters: IndexesIndexesIndexId1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['indexId'] == null) {
            throw new runtime.RequiredError(
                'indexId',
                'Required parameter "indexId" was null or undefined when calling indexesIndexesIndexId_2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/indexes/{index_id}`;
        urlPath = urlPath.replace(`{${"index_id"}}`, encodeURIComponent(String(requestParameters['indexId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an index by ID
     * Delete Index
     */
    async indexesIndexesIndexId_2(requestParameters: IndexesIndexesIndexId1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.indexesIndexesIndexId_2Raw(requestParameters, initOverrides);
    }

    /**
     * Create a new index
     * Create Index
     */
    async indexesIndexes_3Raw(requestParameters: IndexesIndexes0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndexCreateResponse>> {
        if (requestParameters['indexCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'indexCreateRequest',
                'Required parameter "indexCreateRequest" was null or undefined when calling indexesIndexes_3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/indexes/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IndexCreateRequestToJSON(requestParameters['indexCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new index
     * Create Index
     */
    async indexesIndexes_3(requestParameters: IndexesIndexes0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndexCreateResponse> {
        const response = await this.indexesIndexes_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
