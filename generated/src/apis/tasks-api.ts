/* tslint:disable */
/* eslint-disable */
/**
 * Aspect Media Engine API
 * A FastAPI application for AI media engine functionality
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  TaskCreateRequest,
  TaskCreateResponse,
  TaskGetResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TaskCreateRequestFromJSON,
    TaskCreateRequestToJSON,
    TaskCreateResponseFromJSON,
    TaskCreateResponseToJSON,
    TaskGetResponseFromJSON,
    TaskGetResponseToJSON,
} from '../models/index';

export interface TasksTasksRequest {
    taskCreateRequest: TaskCreateRequest;
}

export interface TasksTasksTaskIdRequest {
    taskId: string;
}

/**
 * TasksApi - interface
 * 
 * @export
 * @interface TasksApiInterface
 */
export interface TasksApiInterface {
    /**
     * Create a new task with specified features for an asset
     * @summary Create Task
     * @param {TaskCreateRequest} taskCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    tasksTasksRaw(requestParameters: TasksTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskCreateResponse>>;

    /**
     * Create a new task with specified features for an asset
     * Create Task
     */
    tasksTasks(requestParameters: TasksTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskCreateResponse>;

    /**
     * Get all tasks that are active for the current user (processing, queued, failed)
     * @summary Get Active Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    tasksTasksActiveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskGetResponse>>>;

    /**
     * Get all tasks that are active for the current user (processing, queued, failed)
     * Get Active Tasks
     */
    tasksTasksActive(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskGetResponse>>;

    /**
     * Get a task by ID
     * @summary Get Task
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    tasksTasksTaskIdRaw(requestParameters: TasksTasksTaskIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskGetResponse>>;

    /**
     * Get a task by ID
     * Get Task
     */
    tasksTasksTaskId(requestParameters: TasksTasksTaskIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskGetResponse>;

}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI implements TasksApiInterface {

    /**
     * Create a new task with specified features for an asset
     * Create Task
     */
    async tasksTasksRaw(requestParameters: TasksTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskCreateResponse>> {
        if (requestParameters['taskCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'taskCreateRequest',
                'Required parameter "taskCreateRequest" was null or undefined when calling tasksTasks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/tasks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskCreateRequestToJSON(requestParameters['taskCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new task with specified features for an asset
     * Create Task
     */
    async tasksTasks(requestParameters: TasksTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskCreateResponse> {
        const response = await this.tasksTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all tasks that are active for the current user (processing, queued, failed)
     * Get Active Tasks
     */
    async tasksTasksActiveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskGetResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/tasks/active`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskGetResponseFromJSON));
    }

    /**
     * Get all tasks that are active for the current user (processing, queued, failed)
     * Get Active Tasks
     */
    async tasksTasksActive(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskGetResponse>> {
        const response = await this.tasksTasksActiveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a task by ID
     * Get Task
     */
    async tasksTasksTaskIdRaw(requestParameters: TasksTasksTaskIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskGetResponse>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling tasksTasksTaskId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/tasks/{task_id}`;
        urlPath = urlPath.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskGetResponseFromJSON(jsonValue));
    }

    /**
     * Get a task by ID
     * Get Task
     */
    async tasksTasksTaskId(requestParameters: TasksTasksTaskIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskGetResponse> {
        const response = await this.tasksTasksTaskIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
