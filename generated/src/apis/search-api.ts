/* tslint:disable */
/* eslint-disable */
/**
 * Aspect Media Engine API
 * A FastAPI application for AI media engine functionality
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmbedProviderType,
  HTTPValidationError,
  SearchRequest,
  SearchResponse,
} from '../models/index';
import {
    EmbedProviderTypeFromJSON,
    EmbedProviderTypeToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SearchRequestFromJSON,
    SearchRequestToJSON,
    SearchResponseFromJSON,
    SearchResponseToJSON,
} from '../models/index';

export interface SearchSearchRunRequest {
    searchRequest: SearchRequest;
    providerType?: EmbedProviderType | null;
}

/**
 * SearchApi - interface
 * 
 * @export
 * @interface SearchApiInterface
 */
export interface SearchApiInterface {
    /**
     * Perform a search operation
     * @summary Search
     * @param {SearchRequest} searchRequest 
     * @param {EmbedProviderType} [providerType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    searchSearchRunRaw(requestParameters: SearchSearchRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>>;

    /**
     * Perform a search operation
     * Search
     */
    searchSearchRun(requestParameters: SearchSearchRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse>;

}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI implements SearchApiInterface {

    /**
     * Perform a search operation
     * Search
     */
    async searchSearchRunRaw(requestParameters: SearchSearchRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>> {
        if (requestParameters['searchRequest'] == null) {
            throw new runtime.RequiredError(
                'searchRequest',
                'Required parameter "searchRequest" was null or undefined when calling searchSearchRun().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['providerType'] != null) {
            queryParameters['provider_type'] = requestParameters['providerType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/search/run`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestToJSON(requestParameters['searchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseFromJSON(jsonValue));
    }

    /**
     * Perform a search operation
     * Search
     */
    async searchSearchRun(requestParameters: SearchSearchRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse> {
        const response = await this.searchSearchRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
